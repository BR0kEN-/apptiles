<?php
/**
 * @file
 * Various favicon module.
 *
 * @author Gaydamaka Vladimir <vladimir.gaydamaka@ffwagency.com>
 */

define('VARIOUS_FAVICON_MODULE_DIR', drupal_get_path('module', basename(__DIR__)));
define('VARIOUS_FAVICON_THEME_NAME', variable_get('theme_default', ''));
// The folder in which the favicon should be located.
define('VARIOUS_FAVICON_FAVICON_IMAGE_DIR', drupal_get_path('theme', VARIOUS_FAVICON_THEME_NAME) . '/favicon/');
// The name of the configuration file to display favicon on windows device.
define('VARIOUS_FAVICON_BROWSER_CONFIG_FILE', 'browserconfig.xml');
define('VARIOUS_FAVICON_FILE_EXTENSION', 'png');

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function various_favicon_form_system_theme_settings_alter(array &$form, array &$form_state) {
  $device_dimensions = _various_favicon_get_default_file_list();

  $form['favicon']['various_favicon'] = [
    '#type' => 'vertical_tabs',
    '#title' => t('favicon_api settings'),
    '#default_tab' => 'windows',
  ];

  foreach ([
    'windows' => [
      'title' => t('Windows phone'),
    ],
    'apple' => [
      'title' => t('Apple'),
    ],
  ] as $device => $param) {
    $disabled = theme_get_setting("favicon_$device", VARIOUS_FAVICON_THEME_NAME);

    $form[$device] = [
      '#type' => 'fieldset',
      '#title' => $param['title'],
      '#collapsible' => TRUE,
      '#group' => 'various_favicon',
    ];

    $form[$device]['favicon_' . $device] = [
      '#type' => 'checkbox',
      '#title' => t('Disabled advanced favicon settings?'),
      '#default_value' => isset($disabled) ? $disabled : TRUE,
    ];

    foreach ($device_dimensions[$device] as $filename => $dimension) {
      $errors = _various_favicon_file_validate($filename, $dimension);
      $file_state = _various_favicon_file_exist($filename) && empty($errors);

      $form[$device]["favicon_$device" . '_' . $dimension] = [
        '#type' => 'container',
        'favicon' => [
          '#type' => 'checkbox',
          '#title' => t('Exist favicon file with dimension !dimension', ['!dimension' => $dimension]),
          '#description' => t('In the folder "!path" should be located file !filename.!extension', [
            '!path' => VARIOUS_FAVICON_FAVICON_IMAGE_DIR,
            '!filename' => $filename,
            '!extension' => VARIOUS_FAVICON_FILE_EXTENSION,
          ]),
          '#default_value' => $file_state,
          '#disabled' => TRUE,
          '#attributes' => [
            'class' => [
              'dimensions',
              $file_state ? 'green' : 'red',
            ],
          ],
        ],
        '#states' => [
          'invisible' => [
            'input[name="favicon_' . $device . '"]' => ['checked' => TRUE],
          ],
        ],
      ];

      foreach ($errors as $error) {
        $form[$device]["favicon_$device" . '_' . $dimension][] = [
          '#type' => 'html_tag',
          '#tag' => 'p',
          '#value' => $error,
          '#attributes' => [
            'class' => ['error-messages'],
          ],
        ];
      }
    }

    if (module_exists('jquery_colorpicker') && 'windows' === $device) {
      $form[$device]['background'] = [
        '#type' => 'jquery_colorpicker',
        '#title' => t('Background'),
        '#default_value' => theme_get_setting('background', VARIOUS_FAVICON_THEME_NAME),
        '#states' => [
          'invisible' => [
            'input[name="favicon_' . $device . '"]' => ['checked' => TRUE],
          ],
        ],
      ];
    }
  }

  $form['#attached']['css'][] = sprintf('%s/css/various_favicon.css', VARIOUS_FAVICON_MODULE_DIR);

  return $form;
}

/**
 * Implements hook_flush_caches().
 */
function various_favicon_flush_caches() {
  $disabled = theme_get_setting('favicon_windows', VARIOUS_FAVICON_THEME_NAME);

  if (0 === $disabled && file_exists(VARIOUS_FAVICON_MODULE_DIR . '/' . VARIOUS_FAVICON_BROWSER_CONFIG_FILE)) {
    $browser_config = simplexml_load_file(VARIOUS_FAVICON_MODULE_DIR . '/' . VARIOUS_FAVICON_BROWSER_CONFIG_FILE);
    $background = theme_get_setting('background', VARIOUS_FAVICON_THEME_NAME);
    $dimensions = _various_favicon_get_default_file_list('windows');

    $tile = $browser_config->msapplication->tile;
    // Apply custom background to favicon.
    $tile->addChild('TileColor', !empty($background) ? "#$background" : '#fff');

    foreach ($dimensions as $filename => $dimension) {
      $errors = _various_favicon_file_validate($filename, $dimension);

      if (_various_favicon_file_exist($filename) && empty($errors)) {
        switch ($dimension) {
          case '310x150':
            $child = $tile->addChild('wide' . $dimension . 'logo');
            $child->addAttribute('src', _various_favicon_get_file_path($filename));
            break;

          default:
            $child = $tile->addChild('square' . $dimension . 'logo');
            $child->addAttribute('src', _various_favicon_get_file_path($filename));
            break;
        }
      }
    }

    $browser_config->saveXML(drupal_realpath('public://' . VARIOUS_FAVICON_BROWSER_CONFIG_FILE));
  }
}

/**
 * Implements hook_html_head_alter().
 */
function various_favicon_html_head_alter(array &$head_elements) {
  $device_dimensions = _various_favicon_get_default_file_list();

  foreach ($device_dimensions as $device => $dimensions) {
    $disabled = theme_get_setting("favicon_$device", VARIOUS_FAVICON_THEME_NAME);

    if (0 === $disabled) {
      switch ($device) {
        case 'windows':
          if (file_exists(drupal_realpath('public://' . VARIOUS_FAVICON_BROWSER_CONFIG_FILE))) {
            $head_elements['msapplication_config'] = array(
              '#type' => 'html_tag',
              '#tag' => 'meta',
              '#attributes' => array(
                'name' => 'msapplication-config',
                'href' => file_create_url('public://' . VARIOUS_FAVICON_BROWSER_CONFIG_FILE),
              ),
            );
          }
          break;

        case 'apple':
          foreach ($dimensions as $filename => $dimension) {
            $errors = _various_favicon_file_validate($filename, $dimension);

            if (_various_favicon_file_exist($filename) && empty($errors)) {
              $head_elements[$filename] = [
                '#type' => 'html_tag',
                '#tag' => 'link',
                '#attributes' => [
                  'rel' => 'apple-touch-icon',
                  'href' => file_create_url(_various_favicon_get_file_path($filename)),
                  'size' => $dimension,
                ],
              ];
            }
          }
          break;
      }
    }
  }
}

/**
 * Get path to files and name device dimensions.
 *
 * @param string $type
 *   Device type.
 *
 * @return array
 *   The path to files.
 */
function _various_favicon_get_default_file_list($type = 'all') {
  $device_dimensions = [];

  foreach ([
    '70x70',
    '150x150',
    '310x150',
    '310x310',
  ] as $dimension) {
    $device_dimensions['windows']["mstile_$dimension"] = $dimension;
  }

  foreach (['ipad', 'iphone'] as $key => $device) {
    foreach ([
      'ios7_retina' => [
        '120x120',
        '152x152',
      ],
      'retina' => [
        '114x114',
        '144x144',
      ],
      'ios7_non_retina' => [
        '60x60',
        '76x76',
      ],
      'non_retina' => [
        '57x57',
        '72x72',
      ],
    ] as $screen => $dimensions) {
      $device_dimensions['apple'][$device . '_' . $screen . '_' . $dimensions[$key]] = $dimensions[$key];
    }
  }

  return 'all' === $type ? $device_dimensions : (!empty($device_dimensions[$type]) ? $device_dimensions[$type] : []);
}

/**
 * Check exist file.
 *
 * @param string $filename
 *   The name of file.
 *
 * @return bool
 *   Check file.
 */
function _various_favicon_file_exist($filename) {
  return file_exists(sprintf('%s%s.%s', VARIOUS_FAVICON_FAVICON_IMAGE_DIR, $filename, VARIOUS_FAVICON_FILE_EXTENSION));
}

/**
 * Get path to file.
 *
 * @param string $filename
 *   The name of file.
 *
 * @return string
 *   The path to file.
 */
function _various_favicon_get_file_path($filename) {
  return sprintf('%s%s.%s', VARIOUS_FAVICON_FAVICON_IMAGE_DIR, $filename, VARIOUS_FAVICON_FILE_EXTENSION);
}

/**
 * Validate image file.
 *
 * @param string $filename
 *   The name of file.
 * @param string $min_dimensions
 *   The dimension image.
 *
 * @return array
 *   Return error messages.
 */
function _various_favicon_file_validate($filename, $min_dimensions) {
  list($width, $height) = explode('x', $min_dimensions);
  $errors = [];

  if (_various_favicon_file_exist($filename)) {
    $info = image_get_info(_various_favicon_get_file_path($filename));

    if (!empty($info)) {
      if (VARIOUS_FAVICON_FILE_EXTENSION !== $info['extension']) {
        $errors[] = t('File must have extension !extension', ['!extension' => VARIOUS_FAVICON_FILE_EXTENSION]);
      }

      if ($info['width'] === $width && $info['height'] === $height) {
        $errors[] = t('The minimum dimensions are %dimensions pixels.', ['!dimensions' => $min_dimensions]);
      }
    }
    else {
      $errors[] = t('File exist but it is not image or do not have access to the file.');
    }
  }

  return $errors;
}
